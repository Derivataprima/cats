apply plugin: "kotlin"

sourceCompatibility = 1.6
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "uk.co.electronstudio.cats.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes


apply plugin: 'javafx-gradle-plugin'

String osName = org.gradle.internal.os.OperatingSystem.current().getName();
String osVersion = org.gradle.internal.os.OperatingSystem.current().getVersion();
String os='unknown'
println "*** $osName $osVersion was detected."


if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
    os='linux'
    //       appName = 'RetroWarLinux'
} else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
    os='windows'
    println "(MAYBE RUN WIN.BAT TO FIX DPI?)"
    //       appName = 'RetroWarWindows'
} else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
    os='mac'
} else {
    // unknown OS.
}

jfx {
    // minimal requirement for jfxJar-task
    mainClass = 'uk.co.electronstudio.cats.desktop.DesktopLauncher'
    appName = "KittyTransmitty"
    verbose = true

    addPackagerJar = false
    nativeReleaseVersion = "$version"
    // minimal requirement for jfxNative-task
    vendor = 'TeamCat'

    //manifestAttributes = ['Implementation-Version': version]

    //  alternativePathToJarFile = 'build/libs/desktop-0.0.1.jar'

    bundler=os+'.app'



    copyAdditionalAppResourcesToJar = true
    //  additionalBundlerResources = '../android/assets/'
    additionalAppResources = '../core/assets/'

    bundleArguments = [
            systemWide: true
    ]
}
